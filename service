#!/usr/bin/python2.7
from hosted import device, node, config, time, threading
from time import sleep
config.restart_on_update()


device.gpio.monitor(config.pin_16)
device.gpio.monitor(config.pin_17)
device.gpio.monitor(config.pin_18)
device.gpio.monitor(config.pin_19)


sixteen_is_on = False
seventeen_is_on = False
eighteen_is_on = False
nineteen_is_on = False

DIR = 7
STEP = 8
CW = 1
CCW = 0
SPR = 1

# Set up the direction and step pins
device.gpio.setup_pin(DIR, "out")
device.gpio.setup_pin(STEP, "out")
device.gpio.set_pin_value(DIR, CW)

MODE = (14, 15, 18)
# Set up the resolution mode pins
for pin in MODE:
    device.gpio.setup_pin(pin, "out")

RESOLUTION = {'Full': (0, 0, 0)}
for pin, value in zip(MODE, RESOLUTION['Full']):
    device.gpio.set_pin_value(pin, value)

total_duration = 15  # Total duration of the sequence in seconds
phase_duration_acc_dec = 2  # Duration of each phase (acceleration and deceleration) in seconds
phase_duration_constant = 11  # Duration of constant speed phase in seconds

# Adjusted delays for slower rotation
initial_delay = 0.02  # Slower initial delay
minimum_delay = 0.01  # Slower minimum delay
# Calculate the rate of change for delay
delay_change_per_step = (initial_delay - minimum_delay) / (phase_duration_acc_dec / initial_delay)

# Initialize delay
delay = initial_delay
# Calculate total steps based on the average of initial and minimum delays
total_steps = int(total_duration / ((initial_delay + minimum_delay) / 2))



def handle_pin_16():
    global sixteen_is_on
    if not sixteen_is_on:
        sixteen_is_on = True
        print("pin 16 touched")
        device.gpio.setup_pin(20, direction="out")
        device.gpio.setup_pin(26, direction="out")
        device.gpio.set_pin_value(26, high=True)
        time.sleep(20)
        device.gpio.set_pin_value(20, high=True)
        device.gpio.set_pin_value(26, high=True)
        device.gpio.setup_pin(26, direction="out")
        sixteen_is_on = False
        

def handle_pin_17():
    global seventeen_is_on
    if not seventeen_is_on:
        seventeen_is_on = True
        print("pin 17 touched")
        device.gpio.setup_pin(21, direction="out")
        time.sleep(20)
        device.gpio.set_pin_value(21, high=True)
        seventeen_is_on = False


def handle_pin_18():
    global eighteen_is_on, delay  
    if not eighteen_is_on:
        eighteen_is_on = True
        print("pin 18 touched")
        device.gpio.setup_pin(22, direction="out")

        for x in range(total_steps):
            device.gpio.set_pin_value(STEP, 1)
            sleep(delay)
            device.gpio.set_pin_value(STEP, 0)
            sleep(delay)
    
            # Adjust delay for acceleration and deceleration phases
            if x < (total_steps * phase_duration_acc_dec) // total_duration:
                delay = max(minimum_delay, delay - delay_change_per_step)
            elif x > total_steps - (total_steps * phase_duration_acc_dec) // total_duration:
                delay = min(initial_delay, delay + delay_change_per_step)
        device.gpio.set_pin_value(22, high=True)
        eighteen_is_on = False


def handle_pin_19():
    global nineteen_is_on
    if not nineteen_is_on:
        nineteen_is_on = True
        print("pin 19 touched")
        device.gpio.setup_pin(23, direction="out")
        time.sleep(20)
        device.gpio.set_pin_value(23, high=True)
        nineteen_is_on = False

for pin, state in device.gpio.poll_forever():
    if state == 1:
        if pin == 16:
            threading.Thread(target=handle_pin_16).start()
        elif pin == 19:
            threading.Thread(target=handle_pin_19).start()
        elif pin == 17:
            threading.Thread(target=handle_pin_17).start()
        elif pin == 18:
            threading.Thread(target=handle_pin_18).start()
