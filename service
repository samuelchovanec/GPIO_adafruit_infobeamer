#!/usr/bin/python2.7
from hosted import device, node, config, time, threading
config.restart_on_update()

device.gpio.monitor(config.pin_16)
device.gpio.monitor(config.pin_17)
device.gpio.monitor(config.pin_18)
device.gpio.monitor(config.pin_19)

end_times = {
    16: 0,
    17: 0,
    18: 0,
    19: 0
}

def handle_pin(pin, setup_value, value):
    print(f"pin {pin} touched")
    device.gpio.setup_pin(setup_value, direction="out")
    
    # This loop will continue until the end time has been reached
    while time.time() < end_times[pin]:
        time.sleep(1)  # Sleep for 1 second at a time to prevent high CPU usage
    device.gpio.set_pin_value(value, high=True)
    end_times[pin] = 0  # Reset the end time after finishing

while True:
    for pin, state in device.gpio.poll_forever():
        if state == 1:
            # If button is pressed while its action is still running, extend the time.
            if time.time() < end_times[pin]:
                end_times[pin] += 10
            # Else start the action
            else:
                if pin == 16:
                    end_times[pin] = time.time() + 20
                    threading.Thread(target=handle_pin, args=(16, 20, 20)).start()
                elif pin == 17:
                    end_times[pin] = time.time() + 20
                    threading.Thread(target=handle_pin, args=(17, 21, 21)).start()
                elif pin == 18:
                    end_times[pin] = time.time() + 20
                    threading.Thread(target=handle_pin, args=(18, 22, 22)).start()
                elif pin == 19:
                    end_times[pin] = time.time() + 20
                    threading.Thread(target=handle_pin, args=(19, 23, 23)).start()
